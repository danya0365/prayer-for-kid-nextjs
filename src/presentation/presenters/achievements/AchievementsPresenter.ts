import {
  achievementsMockData,
  userStatsMockData,
  getAchievementsByCategory,
  getUnlockedAchievements,
  getLockedAchievements,
  getPointsForNextLevel,
  type Achievement,
  type UserStats,
} from "@/src/data/mock/achievements.mock";

/**
 * View Model for Achievements Page
 */
export interface AchievementsViewModel {
  achievements: Achievement[];
  userStats: UserStats;
  categories: {
    id: Achievement["category"];
    name: string;
    icon: string;
    count: number;
  }[];
  unlockedCount: number;
  lockedCount: number;
  pointsForNextLevel: number;
}

/**
 * Presenter for Achievements Page
 */
export class AchievementsPresenter {
  async getViewModel(): Promise<AchievementsViewModel> {
    try {
      const categories = [
        {
          id: "lessons" as const,
          name: "‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô",
          icon: "üìö",
          count: getAchievementsByCategory("lessons").length,
        },
        {
          id: "practice" as const,
          name: "‡∏ù‡∏∂‡∏Å‡∏ù‡∏ô",
          icon: "üïå",
          count: getAchievementsByCategory("practice").length,
        },
        {
          id: "streak" as const,
          name: "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏∏‡πà‡∏á‡∏°‡∏±‡πà‡∏ô",
          icon: "üî•",
          count: getAchievementsByCategory("streak").length,
        },
        {
          id: "special" as const,
          name: "‡∏û‡∏¥‡πÄ‡∏®‡∏©",
          icon: "‚≠ê",
          count: getAchievementsByCategory("special").length,
        },
      ];

      const unlockedAchievements = getUnlockedAchievements();
      const lockedAchievements = getLockedAchievements();

      return {
        achievements: achievementsMockData,
        userStats: userStatsMockData,
        categories,
        unlockedCount: unlockedAchievements.length,
        lockedCount: lockedAchievements.length,
        pointsForNextLevel: getPointsForNextLevel(userStatsMockData.totalPoints),
      };
    } catch (error) {
      console.error("Error fetching achievements data:", error);
      throw error;
    }
  }

  async generateMetadata() {
    return {
      title: "‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à | Prayer for Kids",
      description: "‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Å‡∏≤‡∏£‡∏•‡∏∞‡∏´‡∏°‡∏≤‡∏î",
    };
  }
}

export class AchievementsPresenterFactory {
  static async create(): Promise<AchievementsPresenter> {
    return new AchievementsPresenter();
  }
}
